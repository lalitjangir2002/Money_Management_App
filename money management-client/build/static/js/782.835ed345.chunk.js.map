{"version":3,"file":"static/js/782.835ed345.chunk.js","mappings":"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","sources":["components/NewExpense/NewExpense.js","components/UI/CustomBackDrop.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './NewExpense.css';\r\nimport { getMoney, postMoney } from '../redux/features/dataSlice';\r\nimport CustomSnackBar from '../UI/CustomSnackBar';\r\nimport CustomBackDrop from '../UI/CustomBackDrop';\r\n\r\nexport default function NewExpense() {\r\n  const dispatch = useDispatch();\r\n  // const loadingFromRedux = useSelector((state) => state.data.data.loading);\r\n  const error = useSelector((state) => state.data.error);\r\n\r\n  const [addExpense, setAddExpense] = useState(false);\r\n  const [enteredTitle, setEnteredTitle] = useState('');\r\n  const [enteredAmount, setEnteredAmount] = useState('');\r\n  const [enteredDate, setEnteredDate] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\r\n\r\n  const addExpenseHandler = () => {\r\n    setAddExpense(true);\r\n  };\r\n\r\n\r\n\r\n  const triggerSnackbar = (message, severity = 'success') => {\r\n    setSnackbarMessage(message);\r\n    setSnackbarSeverity(severity);\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  const saveExpenseDataHandler = async (enteredExpenseData) => {\r\n    setLoading(true);\r\n    try {\r\n      await dispatch(postMoney(enteredExpenseData));\r\n      dispatch(getMoney());\r\n      setAddExpense(false);\r\n      triggerSnackbar('Expense added successfully!');\r\n    } catch (error) {\r\n      console.error(\"Error posting data: \", error);\r\n      triggerSnackbar('Failed to add expense', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: enteredDate\r\n    };\r\n\r\n    saveExpenseDataHandler(expenseData);\r\n    setEnteredTitle('');\r\n    setEnteredAmount('');\r\n    setEnteredDate('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {/* {loadingFromRedux && <p>Loading...</p>} */}\r\n      {error && <p>Error: {error}</p>}\r\n      {loading && (\r\n        <CustomBackDrop loading={loading}/>\r\n      )}\r\n      {addExpense ? (\r\n        <form onSubmit={submitHandler}>\r\n          <div className=\"new-expense__controls\">\r\n            <div className=\"new-expense__control\">\r\n              <label>Title</label>\r\n              <input \r\n                type=\"text\" \r\n                value={enteredTitle} \r\n                onChange={(e) => setEnteredTitle(e.target.value)} \r\n                disabled={loading}\r\n              />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n              <label>Amount</label>\r\n              <input \r\n                type=\"number\" \r\n                min=\"0.01\" \r\n                step=\"0.01\" \r\n                value={enteredAmount} \r\n                onChange={(e) => setEnteredAmount(e.target.value)} \r\n                disabled={loading}\r\n              />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n              <label>Date</label>\r\n              <input \r\n                type=\"date\" \r\n                min=\"2020-01-01\" \r\n                max=\"2027-12-31\" \r\n                value={enteredDate} \r\n                onChange={(e) => setEnteredDate(e.target.value)} \r\n                disabled={loading}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"new-expense__actions\">\r\n            <button type=\"button\" className='btn' onClick={() => setAddExpense(false)} disabled={loading}>\r\n              Cancel\r\n            </button>\r\n            <button className='btn' type=\"submit\" disabled={loading}>\r\n              {loading ? 'Adding...' : 'Add Expense'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      ) : (\r\n        <button className=\"btn\" onClick={addExpenseHandler}>Add Expenses</button>\r\n      )}\r\n      <CustomSnackBar\r\n        snackbarOpen={snackbarOpen}\r\n        handleSnackbarClose={handleSnackbarClose}\r\n        snackbarSeverity={snackbarSeverity}\r\n        snackbarMessage={snackbarMessage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nconst CustomBackDrop = ({loading}) => {\r\n  return (\r\n    <div>\r\n        <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={loading}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomBackDrop;"],"names":["NewExpense","dispatch","useDispatch","error","useSelector","state","data","addExpense","setAddExpense","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","triggerSnackbar","message","severity","arguments","length","undefined","_jsxs","className","children","_jsx","CustomBackDrop","onSubmit","event","preventDefault","async","postMoney","enteredExpenseData","getMoney","console","saveExpenseDataHandler","title","amount","date","type","value","onChange","e","target","disabled","min","step","max","onClick","addExpenseHandler","CustomSnackBar","handleSnackbarClose","_ref","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress"],"sourceRoot":""}