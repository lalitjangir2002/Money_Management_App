{"version":3,"file":"static/js/939.dee9fbc9.chunk.js","mappings":"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","sources":["Auth/Login.js","components/UI/CustomBackDrop.js","components/UI/formValidation/LoginFormSchema.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginUser } from '../components/redux/features/AuthSlice';\r\nimport CustomBackDrop from '../components/UI/CustomBackDrop';\r\nimport CustomSnackBar from '../components/UI/CustomSnackBar';\r\nimport video from \"../assets/form_video.mp4\"\r\nimport { LoginFormSchema } from '../components/UI/formValidation/LoginFormSchema';\r\nimport './login.css';\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const authState = useSelector((state) => state.data.auth);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n   \r\n    try {\r\n      const validatedData = LoginFormSchema.parse({ email, password });\r\n      setLoading(true);\r\n      await dispatch(loginUser(validatedData)).unwrap();\r\n      setSnackbarMessage('Login successful!');\r\n      setSnackbarSeverity('success');\r\n      setSnackbarOpen(true);\r\n      setLoading(false);\r\n      navigate('/');\r\n    } catch (err) {\r\n      setError(authState.error || 'Invalid email or password. Please try again.');\r\n      setSnackbarMessage(authState.error || 'Invalid email or password. Please try again.');\r\n      setSnackbarSeverity('error');\r\n      setSnackbarOpen(true);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSnackbarClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page-container\">\r\n      <div className=\"video-container\">\r\n        <video autoPlay muted loop>\r\n          <source src={video} type=\"video/mp4\" />\r\n        </video>\r\n      </div>\r\n      <div className=\"auth-form-container\">\r\n        <h2>LOGIN</h2>\r\n        <p>Please Enter your Email and Password!</p>\r\n\r\n        <form className=\"login_form\" onSubmit={handleSubmit}>\r\n          {error && <p className=\"error-message\">{error}</p>}\r\n          \r\n          <div className=\"input-group\">\r\n            <input\r\n              type='email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n            <label>Email</label>\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <input\r\n              type='password'\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n            <label>Password</label>\r\n          </div>\r\n\r\n          <div>\r\n            <button className='login_btn' type=\"submit\">Login</button>\r\n          </div>\r\n\r\n          <div className=\"form-links\">\r\n            <p>Don't have an account? <Link to=\"/signup\">Sign Up</Link></p>\r\n            <p>Don't remember password? <Link to=\"/resetpassword\">Reset Password</Link></p>\r\n          </div>\r\n        </form>\r\n\r\n        <CustomBackDrop loading={loading} />\r\n        \r\n        <CustomSnackBar \r\n          snackbarOpen={snackbarOpen} \r\n          handleSnackbarClose={handleSnackbarClose} \r\n          snackbarSeverity={snackbarSeverity} \r\n          snackbarMessage={snackbarMessage} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nconst CustomBackDrop = ({loading}) => {\r\n  return (\r\n    <div>\r\n        <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={loading}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomBackDrop;","import { z } from 'zod';\r\n\r\nexport const LoginFormSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(6),\r\n});\r\n\r\nexport const SignUpFormSchema = z.object({\r\n    email: z.string().email(),\r\n    password: z.string().min(6),\r\n    firstName: z.string().min(2),\r\n    lastName: z.string().min(2),\r\n  });"],"names":["email","setEmail","useState","password","setPassword","error","setError","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","dispatch","useDispatch","navigate","useNavigate","authState","useSelector","state","data","auth","_jsxs","className","children","_jsx","autoPlay","muted","loop","src","video","type","onSubmit","async","e","preventDefault","validatedData","LoginFormSchema","parse","loginUser","unwrap","err","value","onChange","target","required","Link","to","CustomBackDrop","CustomSnackBar","handleSnackbarClose","event","reason","_ref","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","z","object","string","min","SignUpFormSchema","firstName","lastName"],"sourceRoot":""}