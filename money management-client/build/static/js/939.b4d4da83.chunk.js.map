{"version":3,"file":"static/js/939.b4d4da83.chunk.js","mappings":"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","sources":["Auth/Login.js","components/UI/CustomBackDrop.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginUser } from '../components/redux/features/AuthSlice';\r\nimport CustomBackDrop from '../components/UI/CustomBackDrop';\r\nimport CustomSnackBar from '../components/UI/CustomSnackBar';\r\nimport video from \"../assets/form_video.mp4\";\r\nimport './login.css';\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const authState = useSelector((state) => state.data.auth);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Basic validation\r\n    if (!email || !password) {\r\n      setSnackbarMessage('Please fill in all fields.');\r\n      setSnackbarSeverity('error');\r\n      setSnackbarOpen(true);\r\n      return;\r\n    }\r\n\r\n    // Email validation (simple regex)\r\n    if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n      setSnackbarMessage('Invalid email format.');\r\n      setSnackbarSeverity('error');\r\n      setSnackbarOpen(true);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      await dispatch(loginUser({ email, password })).unwrap();\r\n      setSnackbarMessage('Login successful!');\r\n      setSnackbarSeverity('success');\r\n      navigate('/');\r\n    } catch (err) {\r\n      setSnackbarMessage(authState.error || 'Invalid email or password. Please try again.');\r\n      setSnackbarSeverity('error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSnackbarClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page-container\">\r\n      <div className=\"video-container\">\r\n        <video autoPlay muted loop>\r\n          <source src={video} type=\"video/mp4\" />\r\n        </video>\r\n      </div>\r\n      <div className=\"auth-form-container\">\r\n        <h2>LOGIN</h2>\r\n        <p>Please Enter your Email and Password!</p>\r\n\r\n        <form className=\"login_form\" onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type='email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              required\r\n            />\r\n            <label>Email</label>\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <input\r\n              type='password'\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n            />\r\n            <label>Password</label>\r\n          </div>\r\n\r\n          <div>\r\n            <button className='login_btn' type=\"submit\">Login</button>\r\n          </div>\r\n\r\n          <div className=\"form-links\">\r\n            <p>Don't have an account? <Link to=\"/signup\">Sign Up</Link></p>\r\n            <p>Don't remember password? <Link to=\"/resetpassword\">Reset Password</Link></p>\r\n          </div>\r\n        </form>\r\n\r\n        <CustomBackDrop loading={loading} />\r\n        \r\n        <CustomSnackBar \r\n          snackbarOpen={snackbarOpen} \r\n          handleSnackbarClose={handleSnackbarClose} \r\n          snackbarSeverity={snackbarSeverity} \r\n          snackbarMessage={snackbarMessage} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nconst CustomBackDrop = ({loading}) => {\r\n  return (\r\n    <div>\r\n        <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={loading}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomBackDrop;"],"names":["email","setEmail","useState","password","setPassword","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","dispatch","useDispatch","navigate","useNavigate","authState","useSelector","state","data","auth","_jsxs","className","children","_jsx","autoPlay","muted","loop","src","video","type","onSubmit","async","e","preventDefault","test","loginUser","unwrap","err","error","value","onChange","target","required","Link","to","CustomBackDrop","CustomSnackBar","handleSnackbarClose","event","reason","_ref","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress"],"sourceRoot":""}